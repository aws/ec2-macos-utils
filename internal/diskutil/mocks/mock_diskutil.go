// Code generated by MockGen. DO NOT EDIT.
// Source: diskutil.go

// Package mock_diskutil is a generated GoMock package.
package mock_diskutil

import (
	reflect "reflect"

	types "github.com/aws/ec2-macos-utils/internal/diskutil/types"
	gomock "github.com/golang/mock/gomock"
)

// MockDiskUtil is a mock of DiskUtil interface.
type MockDiskUtil struct {
	ctrl     *gomock.Controller
	recorder *MockDiskUtilMockRecorder
}

// MockDiskUtilMockRecorder is the mock recorder for MockDiskUtil.
type MockDiskUtilMockRecorder struct {
	mock *MockDiskUtil
}

// NewMockDiskUtil creates a new mock instance.
func NewMockDiskUtil(ctrl *gomock.Controller) *MockDiskUtil {
	mock := &MockDiskUtil{ctrl: ctrl}
	mock.recorder = &MockDiskUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskUtil) EXPECT() *MockDiskUtilMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockDiskUtil) Info(id string) (*types.DiskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", id)
	ret0, _ := ret[0].(*types.DiskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockDiskUtilMockRecorder) Info(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockDiskUtil)(nil).Info), id)
}

// List mocks base method.
func (m *MockDiskUtil) List(args []string) (*types.SystemPartitions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", args)
	ret0, _ := ret[0].(*types.SystemPartitions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDiskUtilMockRecorder) List(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDiskUtil)(nil).List), args)
}

// RepairDisk mocks base method.
func (m *MockDiskUtil) RepairDisk(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepairDisk", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepairDisk indicates an expected call of RepairDisk.
func (mr *MockDiskUtilMockRecorder) RepairDisk(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepairDisk", reflect.TypeOf((*MockDiskUtil)(nil).RepairDisk), id)
}

// ResizeContainer mocks base method.
func (m *MockDiskUtil) ResizeContainer(id, size string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeContainer", id, size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeContainer indicates an expected call of ResizeContainer.
func (mr *MockDiskUtilMockRecorder) ResizeContainer(id, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeContainer", reflect.TypeOf((*MockDiskUtil)(nil).ResizeContainer), id, size)
}

// MockAPFS is a mock of APFS interface.
type MockAPFS struct {
	ctrl     *gomock.Controller
	recorder *MockAPFSMockRecorder
}

// MockAPFSMockRecorder is the mock recorder for MockAPFS.
type MockAPFSMockRecorder struct {
	mock *MockAPFS
}

// NewMockAPFS creates a new mock instance.
func NewMockAPFS(ctrl *gomock.Controller) *MockAPFS {
	mock := &MockAPFS{ctrl: ctrl}
	mock.recorder = &MockAPFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPFS) EXPECT() *MockAPFSMockRecorder {
	return m.recorder
}

// ResizeContainer mocks base method.
func (m *MockAPFS) ResizeContainer(id, size string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeContainer", id, size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeContainer indicates an expected call of ResizeContainer.
func (mr *MockAPFSMockRecorder) ResizeContainer(id, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeContainer", reflect.TypeOf((*MockAPFS)(nil).ResizeContainer), id, size)
}
